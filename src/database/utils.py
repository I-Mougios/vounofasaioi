# database/core/utils.py

from typing import Optional, Union

import sqlalchemy as sa
from sqlalchemy import TIMESTAMP, Date, DateTime, Float, Integer, Numeric
from sqlalchemy.orm import DeclarativeBase

from .base import Base

__all__ = [
    "create_index_if_not_exists",
    "get_date_columns",
    "get_numeric_columns",
    "get_column_names",
    "get_all_tables",
    "reset_database",
    "reset_table",
]


def get_column_names(table: Union[sa.Table, DeclarativeBase]):
    """
    Returns a list of column names from an ORM model or SQLAlchemy sa.Table.

    Parameters:
        sa.Table: An SQLAlchemy ORM model class or a Table instance.

    Returns:
        list of column names as strings.
    """
    if hasattr(table, "__table__"):
        table = table.__table__

    if isinstance(table, sa.Table):
        return [col.name for col in table.c]
    else:
        raise TypeError("Input must be an ORM model or a SQLAlchemy Table.")


def get_date_columns(table: Union[DeclarativeBase, sa.Table]) -> list[str]:
    """
    Returns a list of DATE/DATETIME/TIMESTAMP column names
    from a SQLAlchemy ORM model or Table.

    Parameters:
        table: ORM class or SQLAlchemy Table.

    Returns:
        list of date column names as uppercase strings.
    """

    if hasattr(table, "__table__"):
        table = table.__table__

    if isinstance(table, sa.Table):
        return [col.name for col in table.c if isinstance(col.type, (Date, DateTime, TIMESTAMP))]
    else:
        raise TypeError("Input must be an ORM model or a SQLAlchemy Table.")


def get_numeric_columns(table: Union[DeclarativeBase, sa.Table]) -> list[str]:
    """
    Returns a list of DATE/DATETIME column names (in uppercase)
    from a SQLAlchemy ORM model or Table.

    Parameters:
        table: ORM class or SQLAlchemy Table.

    Returns:
        list of date column names as uppercase strings.
    """
    if hasattr(table, "__table__"):
        table = table.__table__

    if isinstance(table, sa.Table):
        return [col.name for col in table.c if isinstance(col.type, (Numeric, Float, Integer))]
    else:
        raise TypeError("Input must be an ORM model or a SQLAlchemy Table.")


def get_all_tables(engine: sa.Engine, schema: str) -> list[str]:
    """
    Return a list of table names in the given schema.

    Parameters:
        engine (sa.Engine): SQLAlchemy engine connected to the database.
        schema (str): Name of the schema to inspect.
    """
    inspector = sa.inspect(engine)
    schema_tables = inspector.get_table_names(schema=schema)
    return schema_tables


def reset_database(engine):
    """
    Drops all tables and recreates them based on SQLAlchemy ORM metadata.

    Parameters:
    - engine: SQLAlchemy Engine instance.
    """
    # Drop all tables
    Base.metadata.drop_all(bind=engine, checkfirst=True)
    # Recreate all tables
    Base.metadata.create_all(bind=engine, checkfirst=True)


def reset_table(
    table_obj: Union[DeclarativeBase, sa.Table],
    engine: sa.Engine,
    sequence: Optional[sa.Sequence] = None,
):
    """
    Drops and recreates a table and optionally resets an associated sequence.

    Parameters:
    - table_obj: SQLAlchemy ORM model class or Table object.
    - engine: SQLAlchemy engine instance.
    - sequence: Optional SQLAlchemy Sequence object to drop and recreate.
    """
    if hasattr(table_obj, "__table__"):
        table = table_obj.__table__
    elif isinstance(table_obj, sa.Table):
        table = table_obj
    else:
        raise TypeError("Expected ORM model class or Table object.")

    table.drop(engine, checkfirst=True)

    if sequence:
        sequence.drop(bind=engine, checkfirst=True)
        sequence.create(bind=engine, checkfirst=True)

    table.create(engine, checkfirst=True)


def create_index_if_not_exists(
    engine: sa.Engine,
    table: Union[DeclarativeBase, sa.Table],
    columns: Union[str, list[str]],
    index_name: str = None,
    unique: bool = False,
):
    """
    Create an index on the specified column(s) if it does not already exist.

    Parameters:
        engine: SQLAlchemy Engine bound to the database
        table: SQLAlchemy ORM model or Table object
        columns: Column name or list of column names to index
        index_name: Optional index name. If None, will be autogenerated.
        unique: Whether the index should enforce uniqueness
    """

    if isinstance(columns, str):
        columns = [columns]

    table_obj = table.__table__ if hasattr(table, "__table__") else table
    cols_objects = [getattr(table.c, col) for col in columns]
    if not index_name:
        index_name = f"ix_{table_obj.name}_{'_'.join(columns)}"
    index = sa.Index(index_name, *cols_objects, unique=unique)

    try:
        index.create(bind=engine)
    except sa.exc.DatabaseError:
        pass
